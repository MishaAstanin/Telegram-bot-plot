import telebot
from telebot import types
import matplotlib
import matplotlib.pyplot as plt

matplotlib.use('agg')

Bot = telebot.TeleBot('5841839336:AAFLSTbBroadPnrfAujIzmDm8AJ5Sk3kGnI')

bot_text = {
    'menu': '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞:',
    'lin_p': '–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ üìà',
    'bar_p': '–°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ üìä',
    'cir_p': '–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ ‚≠ï',
    'read': '–°—á–∏—Ç–∞—Ç—å',
    'read_f': '–°—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞',
    'read_data': '–î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è',
    'color_lin': '–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∞:',
    'color_bar': '–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —Å—Ç–æ–ª–±—Ü–æ–≤:',
    'axis_choice': '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Å–µ–π:',
    'axis_yes': '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Å–µ–π',
    'axis_no': '–ù–∞–∑–≤–∞–Ω–∏—è –æ—Å–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é',
    'axis_input': '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –æ—Å–µ–π\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n\n–∏–º—è_–æ—Å–∏_X\n–∏–º—è_–æ—Å–∏_Y',
    'lin_input': '–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω—ã —Ç–æ—á–µ–∫\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n\n–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞_X1 –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞_Y1\n–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞_X2 –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞_Y2',
    'bar_input': '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n\n—Å—Ç–æ–ª–±–µ—Ü_1 –∑–Ω–∞—á–µ–Ω–∏–µ_1\n—Å—Ç–æ–ª–±–µ—Ü_2 –∑–Ω–∞—á–µ–Ω–∏–µ_2',
    'cir_input': '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–Ω–æ–≤–∞–Ω–∏–µ –≤–µ–ª–∏—á–∏–Ω—ã –∏ –µ—ë –∑–Ω–∞—á–µ–Ω–∏–µ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n\n–≤–µ–ª–∏—á–∏–Ω–∞_1 –∑–Ω–∞—á–µ–Ω–∏–µ_1\n–≤–µ–ª–∏—á–∏–Ω–∞_2 –∑–Ω–∞—á–µ–Ω–∏–µ_2',
    'err_choice': '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤—ã–±–æ—Ä:',
    'input_err': '–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É',
    'file_err': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .txt',
    'answer_text': '–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫üìà\n–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –ø—Ä–∏—à–ª–∏ txt —Ñ–∞–π–ª:\n\n/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n/plot - –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫\n/file - –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ',
    'file_form': '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ:\n\n–î–ª—è –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n\n–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞_X1 –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞_Y1\n–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞_X2 –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞_Y2\n\n–î–ª—è —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n\n—Å—Ç–æ–ª–±–µ—Ü_1 –∑–Ω–∞—á–µ–Ω–∏–µ_1\n—Å—Ç–æ–ª–±–µ—Ü_2 –∑–Ω–∞—á–µ–Ω–∏–µ_2\n\n–î–ª—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n\n–≤–µ–ª–∏—á–∏–Ω–∞_1 –∑–Ω–∞—á–µ–Ω–∏–µ_1\n–≤–µ–ª–∏—á–∏–Ω–∞_2 –∑–Ω–∞—á–µ–Ω–∏–µ_2'
}

colors = {'üü•': 'red',
          'üüß': 'orange',
          'üü®': 'yellow',
          'üü©': 'green',
          'üü¶': 'blue',
          'üü™': 'purple',
          '‚¨õÔ∏è': 'black',
          'üü´': 'brown'
          }

user_data = {}

panel = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
button1 = types.KeyboardButton(bot_text['lin_p'])
button2 = types.KeyboardButton(bot_text['bar_p'])
button3 = types.KeyboardButton(bot_text['cir_p'])
panel.add(button1, button2, button3)

color_panel = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)
color_buttons = [types.KeyboardButton(color) for color in colors]
color_panel.add(*color_buttons)

axis_panel = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
button4 = types.KeyboardButton(bot_text['axis_yes'])
button5 = types.KeyboardButton(bot_text['axis_no'])
axis_panel.add(button4, button5)

t_panel = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
button6 = types.KeyboardButton(bot_text['read'])
t_panel.add(button6)

close_panel = types.ReplyKeyboardRemove()


@Bot.message_handler(commands=['start'])
def start(message):
    user_name = message.from_user.first_name
    bot_hello = f'–ü—Ä–∏–≤–µ—Ç, <b>{user_name}</b>, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫! üìà' \
                f'\n–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –ø—Ä–∏—à–ª–∏ txt —Ñ–∞–π–ª:\n\n/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n/plot - –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫\n/file - –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ'
    Bot.send_message(message.chat.id, bot_hello, parse_mode='html')


@Bot.message_handler(commands=['plot'])
def command_plot(message):
    user_data[message.chat.id] = dict()
    Bot.send_message(message.chat.id, bot_text['menu'], reply_markup=panel)
    Bot.register_next_step_handler(message, choice)


@Bot.message_handler(commands=['file'])
def file_form(message):
    Bot.send_message(message.chat.id, bot_text['file_form'])


@Bot.message_handler(content_types=['document'])
def document(message):
    if message.document.mime_type == 'text/plain' and message.document.file_name.endswith('.txt'):
        user_data[message.chat.id] = dict()

        file_info = Bot.get_file(message.document.file_id)
        file = Bot.download_file(file_info.file_path)
        text_file = file.decode('utf-8')
        user_data[message.chat.id]['text_f'] = text_file

        Bot.send_message(message.chat.id, bot_text['menu'], reply_markup=panel)
        Bot.register_next_step_handler(message, choice)
    else:
        Bot.send_message(message.chat.id, bot_text['file_err'])


@Bot.message_handler(content_types=['sticker'])
def user_text(message):
    Bot.send_message(message.chat.id, bot_text['answer_text'])


@Bot.message_handler(content_types=['text'])
def user_text(message):
    Bot.send_message(message.chat.id, bot_text['answer_text'])


def choice(message):
    if message.text == bot_text['lin_p']:
        user_data[message.chat.id]['plot'] = 'lin_plot'
        Bot.send_message(message.chat.id, bot_text['color_lin'], reply_markup=color_panel)
        Bot.register_next_step_handler(message, color_choice)
    elif message.text == bot_text['bar_p']:
        user_data[message.chat.id]['plot'] = 'bar_plot'
        Bot.send_message(message.chat.id, bot_text['color_bar'], reply_markup=color_panel)
        Bot.register_next_step_handler(message, color_choice)
    elif message.text == bot_text['cir_p']:
        if 'text_f' not in user_data[message.chat.id]:
            Bot.send_message(message.chat.id, bot_text['cir_input'], reply_markup=close_panel)
            Bot.register_next_step_handler(message, circle_plot_data)
        else:
            Bot.send_message(message.chat.id, bot_text['read_f'], reply_markup=t_panel)
            Bot.register_next_step_handler(message, circle_plot_data)
    else:
        Bot.send_message(message.chat.id, bot_text['err_choice'], reply_markup=panel)
        Bot.register_next_step_handler(message, choice)


def color_choice(message):
    if message.text in colors.keys():
        user_data[message.chat.id]['color'] = colors[message.text]
        Bot.send_message(message.chat.id, bot_text['axis_choice'], reply_markup=axis_panel)
        Bot.register_next_step_handler(message, axis_choice)
    else:
        Bot.send_message(message.chat.id, bot_text['err_choice'], reply_markup=color_panel)
        Bot.register_next_step_handler(message, color_choice)


def axis_choice(message):
    if message.text == bot_text['axis_yes']:
        Bot.send_message(message.chat.id, bot_text['axis_input'], reply_markup=close_panel)
        Bot.register_next_step_handler(message, input_axis)
    elif message.text == bot_text['axis_no']:
        user_data[message.chat.id]['X_axis'] = '–û—Å—å X'
        user_data[message.chat.id]['Y_axis'] = '–û—Å—å Y'
        if user_data[message.chat.id]['plot'] == 'lin_plot' and 'text_f' not in user_data[message.chat.id]:
            Bot.send_message(message.chat.id, bot_text['lin_input'], reply_markup=close_panel)
            Bot.register_next_step_handler(message, linear_plot_data)
        elif user_data[message.chat.id]['plot'] == 'bar_plot' and 'text_f' not in user_data[message.chat.id]:
            Bot.send_message(message.chat.id, bot_text['bar_input'], reply_markup=close_panel)
            Bot.register_next_step_handler(message, bar_plot_data)
        elif user_data[message.chat.id]['plot'] == 'lin_plot' and 'text_f' in user_data[message.chat.id]:
            Bot.send_message(message.chat.id, bot_text['read_f'], reply_markup=t_panel)
            Bot.register_next_step_handler(message, linear_plot_data)
        elif user_data[message.chat.id]['plot'] == 'bar_plot' and 'text_f' in user_data[message.chat.id]:
            Bot.send_message(message.chat.id, bot_text['read_f'], reply_markup=t_panel)
            Bot.register_next_step_handler(message, bar_plot_data)
    else:
        Bot.send_message(message.chat.id, bot_text['err_choice'], reply_markup=axis_panel)
        Bot.register_next_step_handler(message, axis_choice)


def input_axis(message):
    text = message.text
    try:
        x, y = text.split('\n')
        user_data[message.chat.id]['X_axis'] = x
        user_data[message.chat.id]['Y_axis'] = y
        if user_data[message.chat.id]['plot'] == 'lin_plot' and 'text_f' not in user_data[message.chat.id]:
            Bot.send_message(message.chat.id, bot_text['lin_input'], reply_markup=close_panel)
            Bot.register_next_step_handler(message, linear_plot_data)
        elif user_data[message.chat.id]['plot'] == 'bar_plot' and 'text_f' not in user_data[message.chat.id]:
            Bot.send_message(message.chat.id, bot_text['bar_input'], reply_markup=close_panel)
            Bot.register_next_step_handler(message, bar_plot_data)
        elif user_data[message.chat.id]['plot'] == 'lin_plot' and 'text_f' in user_data[message.chat.id]:
            Bot.send_message(message.chat.id, bot_text['read_f'], reply_markup=t_panel)
            Bot.register_next_step_handler(message, linear_plot_data)
        elif user_data[message.chat.id]['plot'] == 'bar_plot' and 'text_f' in user_data[message.chat.id]:
            Bot.send_message(message.chat.id, bot_text['read_f'], reply_markup=t_panel)
            Bot.register_next_step_handler(message, bar_plot_data)
    except ValueError:
        Bot.send_message(message.chat.id, bot_text['input_err'])


def linear_plot_data(message):
    if 'text_f' in user_data[message.chat.id]:
        text = user_data[message.chat.id]['text_f']
        Bot.send_message(message.chat.id, bot_text['read_data'], reply_markup=close_panel)
    else:
        text = message.text
    text = text.replace(',', '.')
    try:
        lines = text.split('\n')
        X = list()
        Y = list()
        for line in lines:
            x, y = list(map(float, line.split()))
            X.append(x)
            Y.append(y)
        linear_plot(message, X, Y, user_data[message.chat.id]['color'], user_data[message.chat.id]['X_axis'],
                    user_data[message.chat.id]['Y_axis'])
    except ValueError:
        Bot.send_message(message.chat.id, bot_text['input_err'])


def linear_plot(message, X, Y, color, xlabel, ylabel):
    plt.plot(X, Y, color=color, marker='o', markersize=5)
    plt.grid()
    plt.xlabel(xlabel)
    plt.ylabel(ylabel)
    plt.savefig('linearPlot.png')
    ph = open('linearPlot.png', 'rb')
    Bot.send_message(message.chat.id, '–ì—Ä–∞—Ñ–∏–∫ –ø–æ—Å—Ç—Ä–æ–µ–Ω:')
    Bot.send_photo(message.chat.id, ph)
    plt.clf()
    ph.close()


def bar_plot_data(message):
    if 'text_f' in user_data[message.chat.id]:
        text = user_data[message.chat.id]['text_f']
        Bot.send_message(message.chat.id, bot_text['read_data'], reply_markup=close_panel)
    else:
        text = message.text
    text = text.replace(',', '.')
    try:
        lines = text.split('\n')
        X = list()
        Y = list()
        for line in lines:
            x, y = list(line.split())
            X.append(x)
            y = float(y)
            Y.append(y)
        bar_plot(message, X, Y, user_data[message.chat.id]['color'], user_data[message.chat.id]['X_axis'],
                 user_data[message.chat.id]['Y_axis'])
    except ValueError:
        Bot.send_message(message.chat.id, bot_text['input_err'])


def bar_plot(message, X, Y, color, xlabel, ylabel):
    plt.bar(X, Y, color=color, width=0.3, align='center', edgecolor='black', zorder=2)
    plt.grid()
    plt.xlabel(xlabel)
    plt.ylabel(ylabel)
    plt.savefig('barPlot.png')
    plot = open('barPlot.png', 'rb')
    Bot.send_message(message.chat.id, '–î–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞:')
    Bot.send_photo(message.chat.id, plot)
    plt.clf()
    plot.close()


def circle_plot_data(message):
    if 'text_f' in user_data[message.chat.id]:
        text = user_data[message.chat.id]['text_f']
        Bot.send_message(message.chat.id, bot_text['read_data'], reply_markup=close_panel)
    else:
        text = message.text
    text = text.replace(',', '.')
    try:
        lines = text.split('\n')
        X = list()
        Y = list()
        for line in lines:
            x, y = list(line.split())
            X.append(x)
            y = float(y)
            Y.append(y)
        circle_plot(message, X, Y)
    except ValueError:
        Bot.send_message(message.chat.id, bot_text['input_err'])


def circle_plot(message, X, Y):
    plt.pie(Y, labels=X, autopct='%1.1f%%', radius=1.4)
    plt.savefig('circlePlot.png')
    plot = open('circlePlot.png', 'rb')
    Bot.send_message(message.chat.id, '–î–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞:')
    Bot.send_photo(message.chat.id, plot)
    plt.clf()
    plot.close()


Bot.polling(non_stop=True)
